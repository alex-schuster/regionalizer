import createView from './view';
import { renderHead } from './render';
import { htmlToElement } from './utility';

/**
 * The factory function for viewManager objects.
 *
 * @param {Object} providedDefinitionReaderInstance A definitionReader object.
 * @return {Object} The viewManager object.
 */
const createViewManager = (providedDefinitionReaderInstance) => {
  /**
   * Holds the definitionReader instance.
   *
   * @type {Object}
   */
  const definitionReader = providedDefinitionReaderInstance;

  /**
   * An array of region objects representing the already initialized persistent (reusable) regions.
   *
   * @type {Array<Object>}
   */
  const initializedPersistentRegions = [];

  /**
   * Holds the information whether the current view is the initial view.
   *
   * @type {boolean}
   */
  let onInitialView = true;

  /**
   * Updates the head section of the HTML document.
   *
   * @param {Object} data The data to be used to render the head template.
   */
  const updateHead = (data) => {
    if (data) {
      const markup = renderHead(data);
      const docFragment = htmlToElement(markup);
      const head = document.querySelector('head');
      head.innerHTML = '';
      head.appendChild(docFragment);
    }
  };

  /**
   * Sets the "lang" attribute of the "html" tag.
   *
   * @param {string} langCode The language tag to be set.
   */
  const setLangCode = (langCode) => {
    if (!langCode) {
      document.querySelector('html').removeAttribute('lang');
      return;
    }
    document.querySelector('html').setAttribute('lang', langCode);
  };

  /**
   * Changes the "dir" attribute of the "html" tag.
   *
   * @param {string} textDirection The text direction ("ltr" or "rtl").
   */
  const setTextDirection = (textDirection) => {
    if ((textDirection !== 'ltr' && textDirection !== 'rtl')) {
      document.querySelector('html').removeAttribute('dir');
      return;
    }
    document.querySelector('html').setAttribute('dir', textDirection);
  };

  /**
   * Assembles a layout with rendered and persistent regions.
   *
   * @param {object} rendering The rendering object generated by a view.
   */
  const handleRendering = (rendering) => {
    // Show new view using the rendered markup.
    const viewContainer = document.querySelector('body');
    viewContainer.innerHTML = rendering.layout;

    // Replace the template tags inside the markup with the right DOM elements.
    rendering.regions.forEach((item) => {
      // Find the right placeholder element.
      const placeholderElement = viewContainer.querySelector(
        `template[data-region-name='${item.name}']`
      );

      // Find a possible persistent region that already exists.
      const persistedItem = initializedPersistentRegions.find(
        (initializedPersistentRegion) => initializedPersistentRegion.name === item.name
      );
      if (item.isPersistent && persistedItem) {
        placeholderElement.replaceWith(persistedItem.element);
      } else {
        placeholderElement.replaceWith(item.element);
      }

      // Add the item to initializedPersistentRegions if it is persistent and not there yet.
      if (item.isPersistent && !persistedItem) {
        initializedPersistentRegions.push(item);
      }
    });
  };

  return {
    /**
     * Triggers the rendering of a view and displays it.
     *
     * @param {string} path The path for the view to be loaded.
     * @param {Object} renderData The data object to be used inside the templates.
     * @param {Object} headData The data object to be used for rendering the "head" section.
     * @param {string} langCode The short code describing the language of the content.
     * @param {string} textDirection The text direction ("ltr" or "rtl").
     */
    insertView(path, renderData, headData, langCode, textDirection) {
      if (onInitialView) {
        // Register the persistent elements before changing view for the first time.
        const initialPath = window.location.pathname;
        const layoutName = definitionReader.getLayoutNameByPath(initialPath);
        const initialView = createView(layoutName, initializedPersistentRegions, definitionReader);
        const initialRendering = initialView.render();
        handleRendering(initialRendering);
        onInitialView = false;
      }

      const layoutName = definitionReader.getLayoutNameByPath(path);
      const view = createView(layoutName, initializedPersistentRegions, definitionReader);
      const rendering = view.render(renderData);
      handleRendering(rendering);

      // Update meta data.
      updateHead(headData);
      setLangCode(langCode);
      setTextDirection(textDirection);
    }
  };
};

export default createViewManager;
